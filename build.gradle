/*
 * This software is available under Apache License
 * Copyright (c) 2020
 */
import org.gradle.internal.os.OperatingSystem

// Pixel Version:
version = System.properties["PIXEL_RELEASE"]
if (version == null || version == "unspecified") {
    version = "SNAPSHOT"
}

project.ext.dependencyMap = [
        lwjgl: "3.3.1",
        lombok: "1.18.24",
        junit: "5.9.0",
        mockito: "4.8.0"
]
project.ext.buildTargetList = []

def buildTarget = System.properties["BUILD_TARGET"]
if (buildTarget == "all") {
    // Use this build mode publishing:
    project.ext.buildTargetList.addAll([
            "natives-windows", "natives-windows-x86", "natives-windows-arm64",
            "natives-macos", "natives-macos-arm64",
            "natives-linux", "natives-linux-arm64", "natives-linux-arm32"])
} else if (buildTarget != null) {
    // applies the build target based on the BUILD_TARGET environment variable:
    project.ext.buildTargetList.add(buildTarget)
} else {
    // no manual build type assigned, apply the classifier based on the current OS:
    project.ext.buildTargetList.add(getCurrentClassifier())
}

println("Build Targets: ${project.ext.buildTargetList}")
println("Version: ${version}")

allprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "signing"

    version rootProject.version

    java {
        sourceCompatibility = 11
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://s01.oss.sonatype.org/content/repositories/releases/" }
    }

    dependencies {
        api group: "org.lwjgl", name: "lwjgl", version: rootProject.ext.dependencyMap["lwjgl"]
        api group: "org.lwjgl", name: "lwjgl-glfw", version: rootProject.ext.dependencyMap["lwjgl"]
        api group: "org.lwjgl", name: "lwjgl-opengl", version: rootProject.ext.dependencyMap["lwjgl"]
        api group: "org.lwjgl", name: "lwjgl-openal", version: rootProject.ext.dependencyMap["lwjgl"]
        api group: "org.lwjgl", name: "lwjgl-stb", version: rootProject.ext.dependencyMap["lwjgl"]
        api group: "org.lwjgl", name: "lwjgl-nanovg", version: rootProject.ext.dependencyMap["lwjgl"]

        rootProject.ext.buildTargetList.forEach(classifier -> {
            runtimeOnly group: "org.lwjgl", name: "lwjgl", version: rootProject.ext.dependencyMap["lwjgl"], classifier: "$classifier"
            runtimeOnly group: "org.lwjgl", name: "lwjgl-opengl", version: rootProject.ext.dependencyMap["lwjgl"], classifier: "$classifier"
            runtimeOnly group: "org.lwjgl", name: "lwjgl-openal", version: rootProject.ext.dependencyMap["lwjgl"], classifier: "$classifier"
            runtimeOnly group: "org.lwjgl", name: "lwjgl-glfw", version: rootProject.ext.dependencyMap["lwjgl"], classifier: "$classifier"
            runtimeOnly group: "org.lwjgl", name: "lwjgl-stb", version: rootProject.ext.dependencyMap["lwjgl"], classifier: "$classifier"
            runtimeOnly group: "org.lwjgl", name: "lwjgl-nanovg", version: rootProject.ext.dependencyMap["lwjgl"], classifier: "$classifier"
        })

        // lombok
        compileOnly "org.projectlombok:lombok:${rootProject.ext.dependencyMap["lombok"]}"
        annotationProcessor "org.projectlombok:lombok:${rootProject.ext.dependencyMap["lombok"]}"

        // test:
        testImplementation "org.mockito:mockito-core:${rootProject.ext.dependencyMap["mockito"]}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${rootProject.ext.dependencyMap["junit"]}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${rootProject.ext.dependencyMap["junit"]}"
    }

    test {
        useJUnitPlatform()
    }

    jar {
        manifest {
            attributes(
                    "Implementation-Title": jar.getArchiveBaseName(),
                    "Implementation-Version": getArchiveVersion()
            )
        }
    }

    task sourceJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    signing {
        if (rootProject.hasProperty("signing.keyId")) {
            sign(publishing.publications) // sign everything to be published
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId "io.github.joafalves"
                artifactId project.name
                version rootProject.version

                from components.java

                artifact(sourceJar) {
                    classifier = "sources"
                }

                artifact(javadocJar) {
                    classifier = "javadoc"
                }

                pom {
                    name = "Pixel 2D Game Framework"
                    description = "Modular Java/Kotlin 2D Game Framework."
                    url = "https://github.com/joafalves/pixel-community"
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    developers {
                        developer {
                            id = "jfalves"
                            name = "Jo√£o Alves"
                            email = "joao.cpp.sca@gmail.com"
                        }
                    }
                    scm {
                        connection = "scm:git:git://github.com/joafalves/pixel-community.git"
                        developerConnection = "scm:git:ssh://github.com/joafalves/pixel-community.git"
                        url = "https://github.com/joafalves/pixel-community"
                    }
                }
            }
        }
        repositories {
            if (rootProject.hasProperty("sonatypeUsername") && rootProject.hasProperty("sonatypePassword")) {
                maven {
                    url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                    credentials {
                        username sonatypeUsername
                        password sonatypePassword
                    }
                }
            }
        }
    }

    tasks.withType(AbstractPublishToMaven).configureEach {
        {
            // only publish modules with "mavenPublish" set to "true"
            it.enabled = (project.ext.has("mavenPublish") && project.ext.get("mavenPublish"))
        }
    }

    tasks.withType(Javadoc) {
        failOnError false
        options.addStringOption("Xdoclint:none", "-quiet")
        options.addStringOption("encoding", "UTF-8")
        options.addStringOption("charSet", "UTF-8")
    }
}

static def getCurrentClassifier() {
    switch (OperatingSystem.current()) {
        case OperatingSystem.LINUX:
            def osArch = System.getProperty("os.arch")
            return osArch.startsWith("arm") || osArch.startsWith("aarch64")
                    ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                    : "natives-linux"

        case OperatingSystem.MAC_OS:
            return System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"

        case OperatingSystem.WINDOWS:
            def osArch = System.getProperty("os.arch")
            return osArch.contains("64")
                    ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                    : "natives-windows-x86"
    }
}
